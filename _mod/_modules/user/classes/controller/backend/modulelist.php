<?php defined('SYSPATH') OR die('No direct access allowed.');class Controller_Backend_ModuleList extends Controller_Backend_BaseAdmin {		protected $_module_name;	protected $_class_name;	protected $_search_keys;	protected $_prefs;	protected $module;	protected $modules;	protected $user_level_permission;	protected $module_permission_menu;	protected $module_permission;	protected $statuses;		public function before() {		// Get parent before method        parent::before();				$this->_class_name		= $this->controller;		$this->_module_menu		= $this->acl->module_menu;				$this->_prefs			= (Lib::config($this->_class_name.'.'.$this->_class_name.'_fields') !== NULL) ? Lib::config($this->_class_name.'.'.$this->_class_name.'_fields') : array();				// Load Module List		$this->module			= new Model_ModuleList;		$where_cond1			= array('parent_id' => 0);		$this->modules			= $this->module->find($where_cond1);		// Load User Level		$user_level				= new Model_UserLevel;		$where_cond2			= array('id !='	=> 1,'status' => 'enable');		$this->user_level		= $user_level->find($where_cond2);		// Load User Level Permission		$user_level_permission  = new Model_UserLevelPermission;		$where_cond3			= array('level_id !='	=> 1);		$_user_level_permission	= $user_level_permission->find($where_cond3);				$buffers = array();		foreach ($_user_level_permission as $key) {			$buffers[$key->level_id][$key->permission_id]= $key;		}		$this->user_level_permission = $buffers;		unset($buffers);				// Load Module Permission List		$_module_permission		= new Model_ModulePermission;		$module_permission		= $_module_permission->find('',array('module_link'=>'asc'));				$buffers				= array();		foreach ($module_permission as $_module) {			$buffers[] = $_module;		}		$this->module_permission = $buffers;				//$this->module_permission = $module_permission;		//print_r($module_permission);		//print_r($this->acl->module_current);				//$this->user_level_permission = $_user_level_permission;		//print_r($this->user_level_permission);				unset($buffers,$user_level,$user_level_permission);	}		function action_index () {		/** Table sorting **/		$table_headers	= array('class_name' => 'Module');		foreach($this->user_level as $row) {			$table_headers['level_id_'.$row->id]	= ucwords($row->name);		}		/** Execute list query **/		$order_by	= array('id' => 'ASC');		$where_cond	= array('parent_id'	=> 0);		//$where_cond	= array('id !='	=> 0);		$total_rows	= count($this->module->find($where_cond));		$listings	= $this->module->find($where_cond, $order_by);		/** Views **/		$content_vars		= array('listings'				=> $listings,									'level_id'				=> $this->acl->user->level_id,									'user_level'			=> $this->user_level,									'module_permission'     => $this->module_permission,									'user_level_permission' => $this->user_level_permission,									'class_name'			=> $this->_class_name,									'module_menu'			=> $this->_module_menu,									'table_headers'			=> $table_headers);		$content			= View::factory('user/backend/'.$this->_class_name.'_index');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->page_title		= 'Module List | '.Lib::config('user.title');		$this->template->content		= $content; 	}		public function action_edit() {				// Defined data fields		$fields		= $_POST;				// Make sure it's all array from data module_permission field		if(is_array($fields['module_permission']['level_id'])) {			// Loop data module_permission for update recursion			foreach ($fields['module_permission']['level_id'] as $key => $val) {				foreach ($val as $k => $v) {					// Load Class Model_UserLevelPermission					$_user_level_permitted		= new Model_UserLevelPermission();					$_user_level_permitted->id 	= $k;					// Load Data Model_UserLevelPermission					if ($_user_level_permitted->load()) {						$_user_level_permitted->value 		= $v; 						$_user_level_permitted->modified 	= time(); 						$_user_level_permitted->update();												} 				}			}		}		$this->session->set('modulelist_edit','Module List Updated');		$this->request->redirect(ADMIN . 'modulelist/index');	}}